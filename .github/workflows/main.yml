

name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"

          # For testing, Allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charset = @{
            Upper   = [char[]](65..90)         # A-Z
            Lower   = [char[]](97..122)        # a-z
            Number  = [char[]](48..57)         # 0-9
            Special = [char[]](33..47) + [char[]](58..64) + `
                      [char[]](91..96) + [char[]](123..126) # Special characters
          }

          $Password = @()
          $Password += $charset.Upper   | Get-Random -Count 4
          $Password += $charset.Lower   | Get-Random -Count 4
          $Password += $charset.Number  | Get-Random -Count 4
          $Password += $charset.Special | Get-Random -Count 4
          $Password = $Password | Sort-Object { Get-Random }
          $Password = -join $Password
          $SecurePass = ConvertTo-SecureString $Password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $SecurePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_CREDS=User: RDP | Password: $Password" >> $env:GITHUB_ENV

          if (-not (Get-LocalUser -Name "RDP")) {
            Write-Error "User creation failed"
            exit 1
          }

      - name: Install Tailscale
        run: |
          $TscUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.92.0-amd64.msi"
          $InstallerPath = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $TscUrl -OutFile $InstallerPath
          Start-Process msiexec.exe -ArgumentList "/i", $InstallerPath, "/quiet", "/norestart" -Wait
          Remove-Item $InstallerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID

      - name: Wait for Tailscale to assign an IP
        run: |
          $TsIp = $null
          $retries = 0
          while (-not $TsIp -and $retries -lt 10) {
            $TsIp = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $retries++
          }

          if (-not $TsIp) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }

          echo "TAILSCALE_IP=$TsIp" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"

          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $TestResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $TestResult.TcpTestSucceeded) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }

          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: ${{ env:RDP_CREDS }}"

          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
            Write-Host "$([System.DateTime]::UtcNow) - RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
